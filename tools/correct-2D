#!/usr/bin/env python2

# Description: SPLINE corrections in 2D
# Last update: 22-12-2020

import re
import string
import math as m
import argparse


# Parser
parser = argparse.ArgumentParser(prog='correction-2D',
                                 description='SPLINE correction in 2D')
parser.add_argument('--out',
                    type=str,
                    help='PMF output name (def: pmf-corrected.dat)',
                    default="pmf-corrected.dat")
parser.add_argument('--diff_out',
                    type=str,
                    help='differences output file (def: differences.dat)',
                    default="differences.dat")
parser.add_argument('--pes',
                    metavar='.dat',
                    required=True,
                    type=str,
                    help='PES file')
parser.add_argument('--corr',
                    metavar='.dat',
                    required=True,
                    type=str,
                    help='corrections file')
parser.add_argument('--pmf',
                    metavar='.dat',
                    required=True,
                    type=str,
                    help='PMF file')
args = parser.parse_args()

# variable assignation
pes_file  = args.scan
dft_file  = args.corr
pmf_file  = args.pmf
out_file  = args.out
diff_file = args.diff_out

#######################################################################
##  MAIN                                                            ###
#######################################################################
def main():
    x = []
    y = []
    z = []
    f = file( pes_file, "rt" )
    for l in f:
        t = [ string.atof( i ) for i in string.split( l ) ]
        x.append( t[0] )
        y.append( t[1] )
        z.append( t[2] )
    f.close()

    Z = []
    f = file( dft_file, "rt" )
    for l in f:
        t = [ string.atof( i ) for i in string.split( l ) ]
        Z.append( t[2] )
    f.close()

    # print len( x ), len( y ), len( z ), len( Z )
    t = [ Z[i]-z[i] for i in xrange( len( z ) ) ]
    mt = t[:]; mt.sort(); mt = mt[0]
    f = file( "/tmp/n", "wt" )
    for i in xrange( len( x ) ):
        f.write( "%20.10lf%20.10lf%20.10lf\n"%( x[i], y[i], t[i]-mt ) )
    f.close()

    x, y, z = regular( "/tmp/n", ( 27, 27 ), ( .15, .15 ) )
    save( diff_file, x, y, z )
    o = spline_2d( x, y, z )

    px, py, pz = parse( pmf_file )
    px, py, pz = sort( px, py, pz )
    rz = []
    mz = 9e999
    k = 0
    for i in xrange( len( px ) ):
        for j in xrange( len( py ) ):
            rz.append( pz[k] + o.calc( px[i], py[j] )[0] )
            mz = min( mz, rz[-1] )
            k += 1
    k = 0
    f = file( out_file, "wt" )
    for i in xrange( len( px ) ):
        for j in xrange( len( py ) ):
            f.write( "%20.10lf%20.10lf%20.10lf\n"%( px[i], py[j], rz[k] - mz ) )
            k += 1
        f.write( "\n" )
    f.close()

##  INTERPOLATION  ####################################################
#  http://jean-pierre.moreau.pagesperso-orange.fr/f_function.html
#  WRONG RESULTS ARISES FROM NON-ASCENDING INDEPENDIENT VARIABLES!!!

def gaussian( rx, x, y, g = 0.1 ):
    z = .0
    s = .0
    for i in xrange( len( x ) ):
        w = m.exp( - m.pow( m.fabs( rx - x[i] ) / g, 2 ) )
        z += y[i] * w
        s += w
    return( z / s )

def lagrange( rx, x, y, n = 2 ):
    s = len( x )
    i = 0
    f = True
    while( i < s and f ):
        f = ( rx > x[i] )
        i += 1
    i0 = i - 1 - n
    ix = i - 1 + n
    if( i0 < 0 ):
        i0 = 0
    if( ix >= s ):
        ix = s - 1
    if( i0 == 0 and ix+n < s ):
        ix += n
    if( ix == s-1 and i0-n > 0 ):
        i0 -=n
    o = .0
    for i in xrange( i0, ix + 1 ):
        t = 1.
        for j in xrange( i0, ix + 1 ):
            if( i != j ):
                t *= ( rx - x[j] ) / ( x[i] - x[j] )
        o += y[i] * t
    return( o )

def lagrange_der( rx, x, y, n = 2 ):
    s = len( x )
    i = 0
    f = True
    while( i < s and f ):
        f = ( rx > x[i] )
        i += 1
    i0 = i - 1 - n
    ix = i - 1 + n
    if( i0 < 0 ):
        i0 = 0
    if( ix >= s ):
        ix = s - 1
    if( i0 == 0 and ix+n < s ):
        ix += n
    if( ix == s-1 and i0-n > 0 ):
        i0 -=n
    o = .0
    p = .0
    for i in xrange( i0, ix + 1 ):
        t = 1.
        v = .0
        for j in xrange( i0, ix + 1 ):
            if( i != j ):
                t *= ( rx - x[j] ) / ( x[i] - x[j] )
                u = 1. / ( x[i] - x[j] )
                for k in xrange( i0, ix + 1 ):
                    if( k != i and k != j ):
                        u *= ( rx - x[k] ) / ( x[i] - x[k] )
                v += u
        o += y[i] * t
        p += y[i] * v
    return( ( o, p ) )

class cubic_spline:

    def __init__( self, x, y ):
        self.__n  = len( x )
        self.__x  = x[:]
        self.__y  = y[:]
        self.__y2 = range( self.__n )
        u = range( self.__n )
        u[0] = .0
        u[self.__n - 1] = .0
        self.__y2[0] = .0
        self.__y2[self.__n - 1] = .0
        for i in xrange( 1, self.__n - 1 ):
            s = ( self.__x[i] - self.__x[i-1] ) / ( self.__x[i+1] - self.__x[i-1] )
            p = s * self.__y2[i-1] + 2.
            self.__y2[i] = ( s - 1. ) / p
            u[i]=( 6. * ( ( self.__y[i+1] - self.__y[i] ) / ( self.__x[i+1] - self.__x[i] ) - ( self.__y[i] - self.__y[i-1] ) / ( self.__x[i] - self.__x[i-1] ) ) / ( self.__x[i+1] - self.__x[i-1] ) - s * u[i-1] ) / p
        for i in xrange( self.__n - 2, -1, -1 ):
            self.__y2[i] = self.__y2[i] * self.__y2[i+1] + u[i]
        del u

    def calc( self, x ):
        rx = x
        if( rx < self.__x[0] ):
            rx = self.__x[0]
        if( rx > self.__x[self.__n - 1] ):
            rx = self.__x[self.__n - 1]
        klo = 1
        khi = self.__n - 1
        while( khi - klo > 1 ):
            k = ( khi + klo ) / 2
            if( self.__x[k] > rx ):
                khi = k
            else:
                klo = k
        h  = self.__x[khi] - self.__x[klo]
        a  = ( self.__x[khi] - rx ) / h
        b  = ( rx - self.__x[klo] ) / h
        ry = a * self.__y[klo] + b * self.__y[khi] + ( ( a ** 3 - a ) * self.__y2[klo] + ( b ** 3 - b ) * self.__y2[khi] ) * ( h * h ) / 6.
        dy = ( self.__y[khi] - self.__y[klo] ) / ( self.__x[khi] - self.__x[klo] ) + ( self.__x[khi] - self.__x[klo] ) * ( ( 3. * b * b - 1 ) * self.__y2[khi] - ( 3. * a * a - 1 ) * self.__y2[klo] ) / 6.
        return( (ry, dy) )

class akima_spline:

    def __init__( self, x, y ):
        self.__n  = len( x )
        self.__x  = x[:]
        self.__y  = y[:]
        self.__xm = [ None, None ]
        for i in xrange( self.__n - 1 ):
            self.__xm.append( ( self.__y[i+1] - self.__y[i] ) / ( self.__x[i+1] - self.__x[i] ) )
        self.__xm.append( 2. * self.__xm[-1] - self.__xm[-2] )
        self.__xm.append( 2. * self.__xm[-1] - self.__xm[-2] )
        self.__xm[1] = 2. * self.__xm[2] - self.__xm[3]
        self.__xm[0] = 2. * self.__xm[1] - self.__xm[2]
        self.__z  = []
        for i in xrange( self.__n ):
            a = m.fabs( self.__xm[i+3] - self.__xm[i+2] )
            b = m.fabs( self.__xm[i+1] -   self.__xm[i] )
            if( a+b > .0 ):
                self.__z.append( ( b * self.__xm[i+2] + a * self.__xm[i+1] ) / ( a + b ) )
            else:
                self.__z.append( ( self.__xm[i+2] + self.__xm[i+1] ) / 2. )

    def calc( self, rx ):
        if( rx < self.__x[0] ):
            i = 0
        elif( rx > self.__x[-1] ):
            i = self.__n - 2
        else:
            i = 0
            f = True
            while( i < self.__n and f ):
                f = ( rx > self.__x[i] )
                i += 1
            if( i > 1 ):
                i -= 2
        b = self.__x[i+1] - self.__x[i]
        a = rx - self.__x[i]
        c = ( 3. * self.__xm[i+2] - 2. * self.__z[i] - self.__z[i+1] ) / b
        d = ( self.__z[i] + self.__z[i+1] - 2. * self.__xm[i+2] ) / ( b * b )
        ry = self.__y[i] + self.__z[i] * a + c * a * a + d * a * a * a
        dy = self.__z[i] + 2. * c * a + 3. * d * a * a
        return( ( ry, dy ) )

class spline_2d:

    def __init__( self, x, y, z, spline = cubic_spline ):
        self.__nx = len( x )
        self.__ny = len( y )
        self.__x  = x[:]
        self.__y  = y[:]
        self.__z  = z[:]
        self.__sp = spline
        self.__sx = []
        for i in xrange( self.__nx ):
            t = [ self.__z[self.__ny*i+j] for j in xrange( self.__ny ) ]
            self.__sx.append( self.__sp( self.__y, t ) )
        self.__sy = []
        for j in xrange( self.__ny ):
            t = [ self.__z[self.__ny*i+j] for i in xrange( self.__nx ) ]
            self.__sy.append( self.__sp( self.__x, t ) )


    def calc( self, rx, ry ):
        t = [ self.__sx[i].calc( ry )[0] for i in xrange( self.__nx ) ]
        x = self.__sp( self.__x, t )
        t = [ self.__sy[i].calc( rx )[0] for i in xrange( self.__ny ) ]
        y = self.__sp( self.__y, t )
        ox = x.calc( rx )
        oy = y.calc( ry )
        return( ( (ox[0]+oy[0])*0.5, ox[1], oy[1] ) )

##  GRIDS  ############################################################
number = re.compile( "^[0-9\.\-]+$" )

def parse( fname, changing = "y" ):
    x = []
    y = []
    z = []
    wx = []
    wy = []
    wz = []
    f = file( fname, "rt" )
    if( changing.lower() == "x" ):
        n = 0
        for l in f:
            t = string.split( l )
            if( len( t ) == 3 ):
                if( number.match( t[0] ) and number.match( t[1] ) and number.match( t[2] ) ):
                    n += 1
                    wx.append( string.atof( t[0] ) )
                    wy.append( t[1] )
                    wz.append( t[2] )
        nx = 0
        r = wy[nx]
        while( nx < n and r == wy[nx] ):
            nx += 1
        x = wx[0:nx]
        y = []
        for i in xrange( 0, n, nx ):
            y.append( string.atof( wy[i] ) )
        z = []
        ny = n / nx
        for i in xrange( nx ):
            for j in xrange( ny ):
                z.append( string.atof( wz[i+j*nx] ) )
    else:
        n = 0
        for l in f:
            t = string.split( l )
            if( len( t ) == 3 ):
                if( number.match( t[0] ) and number.match( t[1] ) and number.match( t[2] ) ):
                    n += 1
                    wx.append( t[0] )
                    wy.append( string.atof( t[1] ) )
                    wz.append( string.atof( t[2] ) )
        f.close()
        ny = 0
        r = wx[ny]
        while( ny < n and r == wx[ny] ):
            ny += 1
        y = wy[0:ny]
        x = []
        for i in xrange( 0, n, ny ):
            x.append( string.atof( wx[i] ) )
        z = wz[0:n]
    f.close()
    return( x, y, z )

def parse_changing_X( fname ):
    x, y, z = parse( fname, changing = "x" )
    return( x, y, z )

def parse_changing_Y( fname ):
    x, y, z = parse( fname, changing = "y" )
    return( x, y, z )

def regular( fname, points = ( 10, 10 ), gauss = ( .1, .1 ) ):
    def pythag( dx, dy ):
        x = m.fabs( dx )
        y = m.fabs( dy )
        if( x > y ):
            return( x * m.sqrt( 1. + y * y / ( x * x ) ) )
        if( y == 0.0 ):
            return( 0.0 )
        return( y * m.sqrt( 1. + x * x / ( y * y ) ) )
    dat = []
    min_x = None
    min_y = None
    max_x = None
    max_y = None
    f = file( fname, "rt" )
    for l in f:
        t = string.split( l )
        if( len( t ) == 3 ):
            if( number.match( t[0] ) and number.match( t[1] ) and number.match( t[2] ) ):
                rx = string.atof( t[0] )
                ry = string.atof( t[1] )
                if( min_x and min_y and max_x and max_y ):
                    min_x = min( min_x, rx )
                    min_y = min( min_y, ry )
                    max_x = max( max_x, rx )
                    max_y = max( max_y, ry )
                else:
                    min_x = rx
                    min_y = ry
                    max_x = rx
                    max_y = ry
                dat.append( [ rx, ry, string.atof( t[2] ) ] )
    f.close()
    dx = ( max_x - min_x ) / ( points[0] - 1 )
    # print "[X] delta: %.4lf  points: %d  range: %8.2lf / %8.2lf"%( dx, points[0], min_x, max_x )
    dy = ( max_y - min_y ) / ( points[1] - 1 )
    # print "[Y] delta: %.4lf  points: %d  range: %8.2lf / %8.2lf"%( dy, points[1], min_y, max_y )
    x = []
    for i in xrange( points[0] ):
        x.append( min_x + dx * i )
    y = []
    for i in xrange( points[1] ):
        y.append( min_y + dy * i )
    z = []
    for i in x:
        for j in y:
            rz = .0
            rw = .0
            for a,b,c in dat:
                dst = pythag( ( a - i ) / gauss[0], ( b - j ) / gauss[1] )
                w = m.exp( - dst * dst )
                rz += c * w
                rw += w
            z.append( rz / rw )
    return( x, y, z )

def save( fname, x, y, z ):
    k = 0
    f = file( fname, "wt" )
    for i in x:
        for j in y:
            f.write( "%18.6lf%18.6lf%18.6lf\n"%( i, j, z[k] ) )
            k += 1
        f.write( "\n" )
    f.close()

def sort( x, y, z ):
    t = []
    k = 0
    for i in x:
        for j in y:
            t.append( (i,j,z[k]) )
            k += 1
    t.sort()
    sx = x[:]
    sx.sort()
    sy = y[:]
    sy.sort()
    sz = [ k for i,j,k in t ]
    return( sx, sy, sz )

##  MAIN  #############################################################
main()
