#!/usr/bin/env python3

# Description: Check missing values from an OUT file
# Last update: 18-05-2023

import argparse

from jacques.constants import J2CAL
from jacques.dynnconfig import DynnConfig
from jacques.outfile import OutFile


if __name__ == '__main__':

    # parser
    parser = argparse.ArgumentParser(prog='out-check',
                                     description='check missing values from an OUT file')
    parser.add_argument('o', metavar='.out', type=str, nargs='+',
                        help='output file from DYNAMON, combine if multiple')
    parser.add_argument('-f', metavar='.dynn', type=str,
                        help='dynn configuration file to read index')
    parser.add_argument('-s', metavar='.out', type=str,
                        help='sorted and min-to-zero output file')
    parser.add_argument('--n_min', metavar='#', type=int, default=0,
                        help='lower index extremes to check (def: 0)')
    parser.add_argument('--n_max', metavar='#', type=int, nargs='+',
                        help='upper index extremes to check (def: max index in OUT file)')
    parser.add_argument('-a', '--array', action='store_true',
                        help='output as a SLURM array argument for missing values')
    parser.add_argument('--units', metavar='U', type=str, choices=('kj', 'kcal'), default='kj',
                        help='output units per mol {kj / kcal} (def: kj)')
    args = parser.parse_args()

    out_files   = args.o
    dynn_file   = args.f
    sorted_file = args.s
    ndx_min     = args.n_min
    ndx_max     = args.n_max
    array       = args.array
    units       = args.units

    # read DYNAMON configuration file
    if dynn_file:
        dynnconfig = DynnConfig(dynn_file)
    # read out file
    out = OutFile(out_files)
    # set upper index extremes
    if dynn_file:
        dynnconfig.resolve_constr(out.dim)
        ndx_max = [dynnconfig.constr[i]['n'] for i in range(out.dim)]
    # remove duplicate index and find missing values
    out.unique()
    missing_ndx = out.missing_ndx(ndx_max, ndx_min)
    # write sorted and zero file
    if sorted_file is not None:
        out.sort()
        out.zero()
        if units == 'kcal':
            out.Etot *= J2CAL
            out.Eqm *= J2CAL
        out.write(sorted_file)
    # print results
    if len(missing_ndx) == 0:
        print("ALRIGHT! No missing values found")
    elif array:
        if missing_ndx.shape[1] == 1:
            print(f"--array={','.join(missing_ndx.astype(str).flatten())}")
        else:
            raise NotImplementedError("Array output for multi-dimensional missing values not implemented")
    else:
        missing_ndx_str = [" ".join(i.astype(str)) for i in missing_ndx]
        print("Missing {} values:\n {}".format(len(missing_ndx), '\n '.join(missing_ndx_str)))
