#!/usr/bin/env python3

# Description: Perform post-processing of interactions
# Last update: 16-05-2022

import math
import argparse


# Parser
parser = argparse.ArgumentParser(prog='int-postprocess',
                                 description='Post-processing of interactions')
parser.add_argument('--resid', metavar='.resid', type=str, required=True,
                    help='File with a column of labels for residues')
parser.add_argument('--eqm', metavar='.dat', type=str,
                    help='EQM matrix file (def: intmatrix_eqm.dat)',
                    default="intmatrix_eqm.dat")
parser.add_argument('--lj', metavar='.dat', type=str,
                    help='LJ matrix file (def: intmatrix_lj.dat)',
                    default="intmatrix_lj.dat")
parser.add_argument('--tot', metavar='.dat', type=str,
                    help='Total matrix file (def: intmatrix_tot.dat)',
                    default="intmatrix_tot.dat")
parser.add_argument('--eqm_trj', metavar='.dat', type=str,
                    help='QM energies along trajectory (def: eqm_trj.dat)',
                    default='eqm_trj.dat')
args = parser.parse_args()

resid_file = args.resid
eqm_file   = args.eqm
lj_file    = args.lj
tot_file   = args.tot
fort_file  = args.eqm_trj

c = 4.184

with open(resid_file, "rt") as f:
    R = [l.strip() for l in f]
    n = len(R)

with open(fort_file, "rt") as f:
    V = [float(l) for l in f]

m = [0. for i in range(n)]
s = [0. for i in range(n)]
N = 0.
with open(lj_file, "rt") as f:
    t = [float(l) for l in f.readline().split()]
    while(t != []):
        for i in range(n):
            m[i] += t[i]
            s[i] += t[i] * t[i]
        N += 1.
        t = [float(l) for l in f.readline().split()]
with open("e_lj.dat", "wt") as f:
    for i in range(n):
        m[i] /= N
        s[i] = math.sqrt(math.fabs(s[i] / N - m[i] * m[i]))
        f.write("%-20s%12.6lf%12.6lf\n" % (R[i], m[i] / c, s[i] / c))
    f.write("#%12.6lf\n" % (sum(m) / c))

m = [0. for i in range(n)]
s = [0. for i in range(n)]
N = 0.
k = 0
with open(eqm_file, "rt") as f:
    t = [float(l) for l in f.readline().split()]
    while(t != []):
        for i in range(n):
            m[i] += (t[i] - V[k])
            s[i] += (t[i] - V[k]) * (t[i] - V[k])
        k += 1
        N += 1.
        t = [float(l) for l in f.readline().split()]
with open("e_el.dat", "wt") as f:
    for i in range(n):
        m[i] /= N
        s[i] = math.sqrt(math.fabs(s[i] / N - m[i] * m[i]))
        f.write("%-20s%12.6lf%12.6lf\n" % (R[i], m[i] / c, s[i] / c))
    f.write("#%12.6lf\n" % (sum(m) / c))

m = [0. for i in range(n)]
s = [0. for i in range(n)]
N = 0.
k = 0
with open(tot_file, "rt") as f:
    t = [float(l) for l in f.readline().split()]
    while(t != []):
        for i in range(n):
            m[i] += (t[i] - V[k])
            s[i] += (t[i] - V[k]) * (t[i] - V[k])
        k += 1
        N += 1.
        t = [float(l) for l in f.readline().split()]
with open("e_RS.dat", "wt") as f:
    for i in range(n):
        m[i] /= N
        s[i] = math.sqrt(math.fabs(s[i] / N - m[i] * m[i]))
        f.write("%-20s%12.6lf%12.6lf\n" % (R[i], m[i] / c, s[i] / c))
    f.write("#%12.6lf\n" % (sum(m) / c))
