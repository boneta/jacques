#!/usr/bin/env python2

# Description: SPLINE corrections in 1D
# Last update: 22-12-2020

import os
import sys
import argparse

import numpy as np


# Parser
parser = argparse.ArgumentParser(prog='correction-1D',
                                 description='SPLINE correction in 1D')
parser.add_argument('--out',
                    type=str,
                    help='PMF output file (def: pmf-corrected.dat)',
                    default="pmf-corrected.dat")
parser.add_argument('--diff_out',
                    metavar='DIFF',
                    type=str,
                    help='differences output file (def: differences.dat)',
                    default="differences.dat")
parser.add_argument('--scan',
                    metavar='.dat',
                    required=True,
                    type=str,
                    help='scan/pel file (2 columns: coord, energy)')
parser.add_argument('--corr',
                    metavar='.dat',
                    required=True,
                    type=str,
                    help='corrections file (energy in second column)')
parser.add_argument('--pmf',
                    metavar='.dat',
                    required=True,
                    type=str,
                    help='PMF file name (2 columns: coord, energy)')
parser.add_argument('--units',
                    metavar='U',
                    type=str,
                    choices=['kj','kcal'],
                    help='output units per mol [kj / kcal] (def: kj)',
                    default='kj')
args = parser.parse_args()

# variable assignation
scan_file = args.scan
dft_file  = args.corr
pmf_file  = args.pmf
out_file  = args.out
diff_file = args.diff_out
units     = args.units

diff_file_smooth = os.path.splitext(diff_file)[0] + '-smooth' + os.path.splitext(diff_file)[1]

_J2cal = 1./4.1868   # J -> cal

##  DIFFERENCES  ######################################################
# read data
scan_data = np.loadtxt(scan_file, usecols=[0,1])
dft_data = np.loadtxt(dft_file, usecols=[1])
# calculate differences (DFT - SemiEmp)
diff_data = np.copy(scan_data)
diff_data[:,1] = dft_data[:] - scan_data[:,1]
# minimum zero
diff_data[:,1] = diff_data[:,1] - np.min(diff_data[:,1])
# save difference
np.savetxt(diff_file, diff_data, fmt='%20.10lf', delimiter=' ')


##  SMOOTH  ###########################################################
# gaussian smoothing (based on grids:regular)
g = 0.4     # gaussian parameter (?)
diff_data_smooth = np.copy(diff_data)
for i in range(scan_data.shape[0]):
    w = .0
    r = .0
    for j in range(diff_data.shape[0]):
        d = np.fabs( ( diff_data[i,0] - diff_data[j,0] ) / g )
        t = np.exp( - d * d )
        r += diff_data[j,1] * t
        w += t
    diff_data_smooth[i,1] = r / w
# save smoothing
np.savetxt(diff_file_smooth, diff_data_smooth, fmt='%20.10lf', delimiter=' ')


##  CORRECTION  #######################################################
class spline_1d:
    def __init__( self, x, y ):
        self.__n  = len( x )
        self.__x  = x[:]
        self.__y  = y[:]
        self.__y2 = list(range( self.__n ))
        # ------------------------------------------------ setup
        u = list(range( self.__n ))
        u[0] = .0
        u[self.__n - 1] = .0
        self.__y2[0] = .0
        self.__y2[self.__n - 1] = .0
        for i in range( 1, self.__n - 1 ):
            s = ( self.__x[i] - self.__x[i-1] ) / ( self.__x[i+1] - self.__x[i-1] )
            p = s * self.__y2[i-1] + 2.
            self.__y2[i] = ( s - 1. ) / p
            try:
                u[i]=( 6. * ( ( self.__y[i+1] - self.__y[i] ) / ( self.__x[i+1] - self.__x[i] ) - ( self.__y[i] - self.__y[i-1] ) / ( self.__x[i] - self.__x[i-1] ) ) / ( self.__x[i+1] - self.__x[i-1] ) - s * u[i-1] ) / p
            except ZeroDivisionError:
                u[i]=1.
        for i in range( self.__n - 2, -1, -1 ):
            self.__y2[i] = self.__y2[i] * self.__y2[i+1] + u[i]
        del u

    def calc( self, x ):
        rx = x
        if( rx < self.__x[0] ):
            rx = self.__x[0]
        if( rx > self.__x[self.__n - 1] ):
            rx = self.__x[self.__n - 1]
        klo = 1
        khi = self.__n - 1
        while( khi - klo > 1 ):
            k = int(( khi + klo ) / 2)
            if( self.__x[k] > rx ):
                khi = k
            else:
                klo = k
        h  = self.__x[khi] - self.__x[klo]
        a  = ( self.__x[khi] - rx ) / h
        b  = ( rx - self.__x[klo] ) / h
        ry = a * self.__y[klo] + b * self.__y[khi] + ( ( a ** 3 - a ) * self.__y2[klo] + ( b ** 3 - b ) * self.__y2[khi] ) * ( h * h ) / 6.
        dy = ( self.__y[khi] - self.__y[klo] ) / ( self.__x[khi] - self.__x[klo] ) + ( self.__x[khi] - self.__x[klo] ) * ( ( 3. * b * b - 1 ) * self.__y2[khi] - ( 3. * a * a - 1 ) * self.__y2[klo] ) / 6.
        return( (ry, dy) )

# sort from minimum to maximum (otherwise spline complains)
diff_data_smooth = diff_data_smooth[diff_data_smooth[:,0].argsort()]
# build spline
diff_spline = spline_1d( diff_data_smooth[:,0].tolist(), diff_data_smooth[:,1].tolist() )
# read pmf data
pmf_data = np.loadtxt(pmf_file, usecols=[0,1])
# correct pmf data
corrected_data = pmf_data.copy()
for i in range(corrected_data.shape[0]):
    corrected_data[i,1] = pmf_data[i,1] + diff_spline.calc( pmf_data[i,0] )[0]
# minimum zero
corrected_data[:,1] = corrected_data[:,1] - np.min(corrected_data[:,1])
# converse units if requested
if units == 'kcal':
    corrected_data[:,1] = corrected_data[:,1] * _J2cal
# save corrected data
np.savetxt(out_file, corrected_data, fmt='%20.10lf', delimiter=' ')
