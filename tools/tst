#!/usr/bin/env python3

# Description: Connect free energy barriers and kinetic using TST
# Last update: 15-03-2021

import sys
import math as m
import argparse


## Simple Transition State Theory Calculator ##########################
# by Sergio Boneta

# Based On:
# Watney, J. B.; Soudackov, A. V.; Wong, K. F.; Hammes-Schiffer, S.
# Calculation of the transition state theory rate constant for a general
# reaction coordinate: Application to hydride transfer in an enzyme.
# Chem. Phys. Lett. 2006, 418 (1-3), 268-271.
# https://doi.org/10.1016/j.cplett.2005.10.129


## CONSTANTS ##########################################################
# http://physics.nist.gov/cuu/Constants/index.html
_c       = 299792458.             # m * s-1
_NA      = 6.02214076e23          # mol-1
_kb      = 1.380649e-23           # J * K-1
_h       = 6.62607015e-34         # J * s

_cal2J   = 4.1868                 # cal -> J
_J2Kcal  = 0.0002388459           # J -> Kcal


## FUNCTIONS ##########################################################

def temp2K(temp):
    """Convert temperature to Kelvin based on trailing unit"""
    t = temp.replace(" ","")
    if t[-1].upper() == 'C':
        t = float(t[:-1]) + 273.15
    elif t[-1].upper() == ('K'):
        t = float(t[:-1])
    elif t[-1].upper() == 'F':
        t = ( float(t[:-1]) + 459.67 ) * 5/9
    else:
        t = float(t)
    return t


## PARSER #############################################################
parser = argparse.ArgumentParser(description='Simple connection between free energy barriers and kinetic using TST\n')
parser.add_argument('-k', metavar='k', type=float,
                    help='rate constant input to calculate free energy barrier [s-1]')
parser.add_argument('-G', metavar='dG', type=float,
                    help='free energy input to calculate rate constant [kcal/mol]')
parser.add_argument('-t', metavar='T', type=str, default='298.15K', nargs='+',
                    help="temperature [K], can be followed by units [C/K/F] (def: 298.15K)")
args = parser.parse_args()

rate = args.k
G    = args.G
temp = temp2K("".join(args.t))


## TST Calculator #####################################################

# check input parameters
if not (rate or G):
    sys.exit("ERROR: No input parameter provided (k or G)")
elif rate and G:
    sys.exit("ERROR: Conflict between input parameters (k and G)")

print("-- Simple TST Calculator --\n\n"+
      "Temperature [K]: {:.2f}".format(temp))

# calculate free energy (dG) from rate constant
if rate is not None:
    print("Rate Constant [s-1]: {}\n".format(rate))
    beta = 1/( _kb*_J2Kcal * temp )
    G = m.log( rate * beta * _h*_J2Kcal ) / -beta * _NA
    print("Free Energy Barrier [Kcal/mol]: {}\n".format(G))

# calculate rate constant from free energy (dG)
elif G is not None:
    print("Free Energy Barrier [Kcal/mol]: {}\n".format(G))
    beta = 1/( _kb*_J2Kcal * temp )
    rate = m.exp( G * -beta / _NA ) / ( beta * _h*_J2Kcal )
    print("Rate Constant [s-1]: {}\n".format(rate))
