#!/usr/bin/env python3

# Description: Connect free energy barriers and kinetic using TST
# Last update: 06-05-2021

import re
import math as m
import argparse


## Simple Transition State Theory Calculator ##########################
# by Sergio Boneta

# Based On:
# Watney, J. B.; Soudackov, A. V.; Wong, K. F.; Hammes-Schiffer, S.
# Calculation of the transition state theory rate constant for a general
# reaction coordinate: Application to hydride transfer in an enzyme.
# Chem. Phys. Lett. 2006, 418 (1-3), 268-271.
# https://doi.org/10.1016/j.cplett.2005.10.129


## CONSTANTS ##########################################################
# http://physics.nist.gov/cuu/Constants/index.html
_c       = 299792458.             # m * s-1
_NA      = 6.02214076e23          # mol-1
_kb      = 1.380649e-23           # J * K-1
_h       = 6.62607015e-34         # J * s

_cal2J   = 4.1868                 # cal -> J
_J2Kcal  = 0.0002388459           # J -> Kcal


## FUNCTIONS ##########################################################

def temp2K(temp):
    """Convert temperature to Kelvin based on trailing unit"""
    # split leading number and trailing units
    temp_split = list(filter(None, re.split(r'(^\d+\.?\d*)', temp, maxsplit=1)))
    # check trailing unit and format
    unit = 'K' if len(temp_split) == 1 else temp_split[1][0].upper()
    num = temp_split[0]
    # convert according to unit
    if unit == 'K':
        t = float(num)
    elif unit == 'C':
        t = float(num) + 273.15
    elif unit == 'F':
        t = ( float(num) + 459.67 ) * 5/9
    else:
        raise ValueError("Unkown unit -> {}".format(unit))
    return t

def tst(k=None, G=None, temp=298.15):
    """Take a free energy barrier or kinetic rate and return the other"""
    beta = 1/( _kb*_J2Kcal * temp )
    if not bool(k) ^ bool(G):
        raise ValueError("One and only one parameter required -> k xor G")
    elif k is not None:
        return m.log( k * beta * _h*_J2Kcal ) / -beta * _NA
    elif G is not None:
        return m.exp( G * -beta / _NA ) / ( beta * _h*_J2Kcal )


## TST Calculator #####################################################

if __name__ == '__main__':

    parser = argparse.ArgumentParser(description='Simple connection between free energy barriers and kinetic using TST\n')
    input_group = parser.add_mutually_exclusive_group(required=True)  # k .XOR. G
    input_group.add_argument('-k', metavar='k', type=float,
                             help='rate constant input to calculate free energy barrier [s-1]')
    input_group.add_argument('-G', metavar='dG', type=float,
                             help='free energy input to calculate rate constant [kcal/mol]')
    parser.add_argument('-t', metavar='T', type=str, default='298.15K',
                        help="temperature [K], can be followed by units [C/K/F] (def: 298.15K)")
    parser.add_argument('-s', action='store_true', help=argparse.SUPPRESS)
    args = parser.parse_args()

    k      = args.k
    G      = args.G
    temp   = temp2K(args.t)
    silent = args.s

    if not silent:
        print("-- Simple TST Calculator --\n\n"+
              "Temperature [K]: {:.2f}".format(temp))
        # calculate free energy (dG) from rate constant
        if k is not None:
            print("Rate Constant [s-1]: {}\n\n".format(k)+
                  "Free Energy Barrier [Kcal/mol]: {}\n".format(tst(k=k, temp=temp)))
        # calculate rate constant from free energy (dG)
        elif G is not None:
            print("Free Energy Barrier [Kcal/mol]: {}\n\n".format(G)+
                  "Rate Constant [s-1]: {}\n".format(tst(G=G, temp=temp)))
    else: 
        if k is not None:
            print(tst(k=k, temp=temp))
        elif G is not None:
            print(tst(G=G, temp=temp))
