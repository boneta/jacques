#!/usr/bin/env python3
# -*- coding: utf-8 -*-

## High-level correction of 1D/2D PMFs

import argparse
import sys
from textwrap import dedent

import numpy as np

from jacques.constants import J2CAL
from jacques.srf import array2array, corr_1D, corr_2D, grid2grid

if __name__ == '__main__':

    # parser
    parser = argparse.ArgumentParser(prog='correct-pmf',
                                     description='high-level correction of 1D/2D PMFs')
    parser.add_argument('--out', metavar='.dat', type=str,
                        help='PMF output file (def: pmf-corrected.dat)',
                        default="pmf-corrected.dat")
    parser.add_argument('--diff_raw', metavar='.dat', type=str,
                        help='file with raw differences')
    parser.add_argument('--diff_smooth', metavar='.dat', type=str,
                        help='file with smoothed differences')
    parser.add_argument('--pes', metavar='.out', type=str,
                        help='1D SCAN or 2D PES file from DYNAMON')
    parser.add_argument('--corr', metavar='.out', type=str,
                        help='high-level single point energies file from DYNAMON')
    parser.add_argument('--pmf', metavar='.dat', type=str,
                        help='integrated PMF surface from UmbrellaIntegrator')
    parser.add_argument('--units', metavar='U', type=str,
                        choices=('kj', 'kcal'),
                        help='output units per mol {kj / kcal} (def: kj)',
                        default='kj')
    args = parser.parse_args()

    # variable assignation
    pes_file         = args.pes
    corr_file        = args.corr
    pmf_file         = args.pmf
    out_file         = args.out
    diff_raw_file    = args.diff_raw
    diff_smooth_file = args.diff_smooth
    units            = args.units

    # read files
    pes_data  = np.loadtxt(pes_file,  dtype=float, comments='#')
    corr_data = np.loadtxt(corr_file, dtype=float, comments='#')
    pmf_data  = np.loadtxt(pmf_file,  dtype=float, comments='#')

    print("# PMF CORRECTION")
    header = f"""\
                 ## PMF CORRECTION
                 # POTENTIAL file: {pes_file}
                 # CORR file: {corr_file}
                 # PMF file: {pmf_file}
                 # Units: {units}
              """

    # guess dimension (number of columns)
    #   X  #  DIST  Etot  Eqm  INDX  DIST_REF
    if pes_data.shape[1] == corr_data.shape[1] == 5 and pmf_data.shape[1] == 2:
        dim = 1
        # sort
        pes_data = pes_data[pes_data[:, 3].argsort()]
        corr_data = corr_data[corr_data[:, 3].argsort()]
        pmf_data = pmf_data[pmf_data[:, 0].argsort()]
        # difference
        diff_data = np.zeros((0, 3), dtype=float)
        n = 0
        while n < min(pes_data.shape[0], corr_data.shape[0]):
            if int(pes_data[n, 3]) == int(corr_data[n, 3]):
                diff = corr_data[n, 1] - pes_data[n, 1]
                diff_data = np.vstack([diff_data, [pes_data[n, 0], diff, pes_data[n, 3]]])
                n += 1
            else:
                print("WARNING: Missing value in CORR -> {}".format(pes_data[n, 3]))
                pes_data = np.delete(pes_data, n, axis=0)
        # save differences if requested
        if diff_raw_file is not None:
            np.savetxt(diff_raw_file, diff_data[:,:2], fmt='%20.10f %20.10f')
        if diff_smooth_file is not None:
            np.savetxt(diff_smooth_file,
                       np.column_stack((diff_data[:,0], array2array(diff_data[:,0], diff_data[:,1]))),
                       fmt='%20.10f %20.10f')
        # correction        
        corrected = corr_1D(pmf_data[:,0], pmf_data[:,1], diff_data[:,:2])
        if units == 'kcal': corrected *= J2CAL
        with open(out_file, 'w') as f:
            f.write(dedent(header))
            for i,j in zip(pmf_data[:,0], corrected):
                f.write(f"{i:20.10f} {j:20.10f}\n")

    elif pes_data.shape[1] == corr_data.shape[1] == 8 and pmf_data.shape[1] == 3:
        dim = 2
        # sort
        pes_data = pes_data[np.lexsort((pes_data[:, 5], pes_data[:, 4]))]
        corr_data = corr_data[np.lexsort((corr_data[:, 5], corr_data[:, 4]))]
        pmf_data = pmf_data[np.lexsort((pmf_data[:, 1], pmf_data[:, 0]))]
        # difference
        diff_data = np.zeros((0, 5), dtype=float)
        n = 0
        while n < min(pes_data.shape[0], corr_data.shape[0]):
            if np.all(pes_data[n, 4:6] == corr_data[n, 4:6]):
                diff = corr_data[n, 2] - pes_data[n, 2]
                diff_data = np.vstack([diff_data, [*pes_data[n, 0:2], diff, *pes_data[n, 4:6]]])
                n += 1
            else:
                print("WARNING: Missing value in CORR -> {} {}".format(*pes_data[n, 4:6].astype(int)))
                pes_data = np.delete(pes_data, n, axis=0)
        # save differences if requested
        if diff_raw_file is not None:
            np.savetxt(diff_raw_file, diff_data[:,:3], fmt='%20.10f %20.10f %20.10f')
        if diff_smooth_file is not None:
            np.savetxt(diff_smooth_file,
                       np.column_stack((diff_data[:,:2], grid2grid(diff_data[:,:2], diff_data[:,2])[1])),
                       fmt='%20.10f %20.10f %20.10f')
        # correction        
        corrected = corr_2D(pmf_data[:,:2], pmf_data[:,2], diff_data[:,:3])
        if units == 'kcal': corrected *= J2CAL
        with open(out_file, 'w') as f:
            f.write(dedent(header))
            last_i = None
            for i,j in zip(pmf_data[:], corrected):
                if i[0] != last_i: f.write("\n")
                last_i = i[0]
                f.write(f"{i[0]:20.10f} {i[1]:20.10f} {j:20.10f}\n")

    else:
        sys.exit("ERROR: Inconsistent dimension of input files")
  
